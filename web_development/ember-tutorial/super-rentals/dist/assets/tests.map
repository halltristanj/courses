{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","super-rentals/tests/acceptance/super-rentals-test.js","super-rentals/tests/integration/components/jumbo-test.js","super-rentals/tests/integration/components/map-test.js","super-rentals/tests/integration/components/rental-test.js","super-rentals/tests/integration/components/rental/image-test.js","super-rentals/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"super-rentals/tests/acceptance/super-rentals-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\"], function (_qunit, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | super rentals', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _qunit.test)('visiting /', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.currentURL)(), '/');\n      assert.dom('nav').exists();\n      assert.dom('h1').hasText('SuperRentals');\n      assert.dom('h2').hasText('Welcome to Super Rentals!');\n      assert.dom('.jumbo a.button').hasText('About Us');\n      await (0, _testHelpers.click)('.jumbo a.button');\n      assert.equal((0, _testHelpers.currentURL)(), '/about');\n    });\n    (0, _qunit.test)('visiting /about', async function (assert) {\n      await (0, _testHelpers.visit)('/about');\n      assert.equal((0, _testHelpers.currentURL)(), '/about');\n      assert.dom('nav').exists();\n      assert.dom('h1').hasText('SuperRentals');\n      assert.dom('h2').hasText('About Super Rentals');\n      assert.dom('.jumbo a.button').hasText('Contact Us');\n      await (0, _testHelpers.click)('.jumbo a.button');\n      assert.equal((0, _testHelpers.currentURL)(), '/getting-in-touch');\n    });\n    (0, _qunit.test)('visiting /getting-in-touch', async function (assert) {\n      await (0, _testHelpers.visit)('/getting-in-touch');\n      assert.equal((0, _testHelpers.currentURL)(), '/getting-in-touch');\n      assert.dom('nav').exists();\n      assert.dom('h1').hasText('SuperRentals');\n      assert.dom('h2').hasText('Contact Us');\n      assert.dom('a.button').hasText('About');\n      await (0, _testHelpers.click)('.jumbo a.button');\n      assert.equal((0, _testHelpers.currentURL)(), '/about');\n    });\n    (0, _qunit.test)('navigating using the nav-bar', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.dom('nav').exists();\n      assert.dom('nav a.menu-index').hasText('SuperRentals');\n      assert.dom('nav a.menu-about').hasText('About');\n      assert.dom('nav a.menu-contact').hasText('Contact');\n      await (0, _testHelpers.click)('nav a.menu-about');\n      assert.equal((0, _testHelpers.currentURL)(), '/about');\n      await (0, _testHelpers.click)('nav a.menu-contact');\n      assert.equal((0, _testHelpers.currentURL)(), '/getting-in-touch');\n      await (0, _testHelpers.click)('nav a.menu-index');\n      assert.equal((0, _testHelpers.currentURL)(), '/');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/jumbo-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | jumbo', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders the content inside a jumbo header with a tomster', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Jumbo>Hello World</Jumbo>\n      */\n      {\n        id: \"YfYp0FPz\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"jumbo\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[1,1,0,0,\\\"Hello World\\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.jumbo').exists();\n      assert.dom('.jumbo').hasText('Hello World');\n      assert.dom('.jumbo .tomster').exists();\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/map-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"super-rentals/config/environment\"], function (_qunit, _emberQunit, _testHelpers, _environment) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | map', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders a map image for the specified parameters', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Map\n            @lat=\"37.7797\"\n            @lng=\"-122.4184\"\n            @zoom=\"10\"\n            @width=\"150\"\n            @height=\"120\"\n          />\n      */\n      {\n        id: \"hl/snceS\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"map\\\",[],[[\\\"@lat\\\",\\\"@lng\\\",\\\"@zoom\\\",\\\"@width\\\",\\\"@height\\\"],[\\\"37.7797\\\",\\\"-122.4184\\\",\\\"10\\\",\\\"150\\\",\\\"120\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.map').exists();\n      assert.dom('.map img').hasAttribute('alt', 'Map image at coordinates 37.7797,-122.4184');\n      assert.dom('.map img').hasAttribute('src', /^https:\\/\\/api\\.mapbox\\.com/, 'the src starts with \"https://api.mapbox.com\"');\n      assert.dom('.map img').hasAttribute('width', '150');\n      assert.dom('.map img').hasAttribute('height', '120');\n      let {\n        src\n      } = (0, _testHelpers.find)('.map img');\n      let token = encodeURIComponent(_environment.default.MAPBOX_TOKEN);\n      assert.ok(src.includes('-122.4184,37.7797,10'), 'the src should include the lng,lat,zoom parameter');\n      assert.ok(src.includes('150x120@2x'), 'the src should include the width,height and @2x parameter');\n      assert.ok(src.includes(`access_token=${token}`), 'the src should include the escaped access token');\n    });\n    (0, _qunit.test)('it updates the `src` attribute when the arguments change', async function (assert) {\n      this.setProperties({\n        lat: 37.7749,\n        lng: -122.4194,\n        zoom: 10,\n        width: 150,\n        height: 120\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Map\n            @lat={{this.lat}}\n            @lng={{this.lng}}\n            @zoom={{this.zoom}}\n            @width={{this.width}}\n            @height={{this.height}}\n          />\n      */\n      {\n        id: \"ivWOdoJ7\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"map\\\",[],[[\\\"@lat\\\",\\\"@lng\\\",\\\"@zoom\\\",\\\"@width\\\",\\\"@height\\\"],[[27,[24,0],[\\\"lat\\\"]],[27,[24,0],[\\\"lng\\\"]],[27,[24,0],[\\\"zoom\\\"]],[27,[24,0],[\\\"width\\\"]],[27,[24,0],[\\\"height\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      let img = (0, _testHelpers.find)('.map img');\n      assert.ok(img.src.includes('-122.4194,37.7749,10'), 'the src should include the lng,lat,zoom parameter');\n      assert.ok(img.src.includes('150x120@2x'), 'the src should include the width,height and @2x parameter');\n      this.setProperties({\n        width: 300,\n        height: 200,\n        zoom: 12\n      });\n      assert.ok(img.src.includes('-122.4194,37.7749,12'), 'the src should include the lng,lat,zoom parameter');\n      assert.ok(img.src.includes('300x200@2x'), 'the src should include the width,height and @2x parameter');\n      this.setProperties({\n        lat: 47.6062,\n        lng: -122.3321\n      });\n      assert.ok(img.src.includes('-122.3321,47.6062,12'), 'the src should include the lng,lat,zoom parameter');\n      assert.ok(img.src.includes('300x200@2x'), 'the src should include the width,height and @2x parameter');\n    });\n    (0, _qunit.test)('the default alt attribute can be overridden', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Map\n            @lat=\"37.7797\"\n            @lng=\"-122.4184\"\n            @zoom=\"10\"\n            @width=\"150\"\n            @height=\"120\"\n            alt=\"A map of San Francisco\"\n          />\n      */\n      {\n        id: \"U35cuiTL\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"map\\\",[[23,\\\"alt\\\",\\\"A map of San Francisco\\\",null]],[[\\\"@lat\\\",\\\"@lng\\\",\\\"@zoom\\\",\\\"@width\\\",\\\"@height\\\"],[\\\"37.7797\\\",\\\"-122.4184\\\",\\\"10\\\",\\\"150\\\",\\\"120\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.map img').hasAttribute('alt', 'A map of San Francisco');\n    });\n    (0, _qunit.test)('the src, width and height attributes cannot be overridden', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Map\n            @lat=\"37.7797\"\n            @lng=\"-122.4184\"\n            @zoom=\"10\"\n            @width=\"150\"\n            @height=\"120\"\n            src=\"/assets/images/teaching-tomster.png\"\n            width=\"200\"\n            height=\"300\"\n          />\n      */\n      {\n        id: \"4CB4PVXH\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"map\\\",[[23,\\\"src\\\",\\\"/assets/images/teaching-tomster.png\\\",null],[23,\\\"width\\\",\\\"200\\\",null],[23,\\\"height\\\",\\\"300\\\",null]],[[\\\"@lat\\\",\\\"@lng\\\",\\\"@zoom\\\",\\\"@width\\\",\\\"@height\\\"],[\\\"37.7797\\\",\\\"-122.4184\\\",\\\"10\\\",\\\"150\\\",\\\"120\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.map img').hasAttribute('src', /^https:\\/\\/api\\.mapbox\\.com/, 'the src starts with \"https://api.mapbox.com\"');\n      assert.dom('.map img').hasAttribute('width', '150');\n      assert.dom('.map img').hasAttribute('height', '120');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rental-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | rental', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders information about a rental property', async function (assert) {\n      this.setProperties({\n        rental: {\n          title: 'Grand Old Mansion',\n          owner: 'Veruca Salt',\n          city: 'San Francisco',\n          location: {\n            lat: 37.7749,\n            lng: -122.4194\n          },\n          category: 'Estate',\n          type: 'Standalone',\n          bedrooms: 15,\n          image: 'https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg',\n          description: 'This grand old mansion sits on over 100 acres of rolling hills and dense redwood forests.'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Rental @rental={{this.rental}} />\n      */\n      {\n        id: \"56rmR8vx\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"rental\\\",[],[[\\\"@rental\\\"],[[27,[24,0],[\\\"rental\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('article').hasClass('rental');\n      assert.dom('article h3').hasText('Grand Old Mansion');\n      assert.dom('article .detail.owner').includesText('Veruca Salt');\n      assert.dom('article .detail.type').includesText('Standalone');\n      assert.dom('article .detail.location').includesText('San Francisco');\n      assert.dom('article .detail.bedrooms').includesText('15');\n      assert.dom('article .image').exists();\n      assert.dom('article .map').exists();\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rental/image-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | rental/image', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders the given image', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <Rental::Image\n              src=\"/assets/images/teaching-tomster.png\"\n              alt=\"Teaching Tomster\"\n            />\n          \n      */\n      {\n        id: \"QI3G9Ke4\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,1,0,0,\\\"\\\\n      \\\"],[7,\\\"rental/image\\\",[[23,\\\"src\\\",\\\"/assets/images/teaching-tomster.png\\\",null],[23,\\\"alt\\\",\\\"Teaching Tomster\\\",null]],[[],[]],null],[1,1,0,0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.image').exists();\n      assert.dom('.image img').hasAttribute('src', '/assets/images/teaching-tomster.png');\n      assert.dom('.image img').hasAttribute('alt', 'Teaching Tomster');\n    });\n    (0, _qunit.test)('clicking on the component toggles its size', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <Rental::Image\n              src=\"/assets/images/teaching-tomster.png\"\n              alt=\"Teaching Tomster\"\n            />\n          \n      */\n      {\n        id: \"QI3G9Ke4\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,1,0,0,\\\"\\\\n      \\\"],[7,\\\"rental/image\\\",[[23,\\\"src\\\",\\\"/assets/images/teaching-tomster.png\\\",null],[23,\\\"alt\\\",\\\"Teaching Tomster\\\",null]],[[],[]],null],[1,1,0,0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('button.image').exists();\n      assert.dom('.image').doesNotHaveClass('large');\n      assert.dom('.image small').hasText('View Larger');\n      await (0, _testHelpers.click)('button.image');\n      assert.dom('.image').hasClass('large');\n      assert.dom('.image small').hasText('View Smaller');\n      await (0, _testHelpers.click)('button.image');\n      assert.dom('.image').doesNotHaveClass('large');\n      assert.dom('.image small').hasText('View Larger');\n    });\n  });\n});","define(\"super-rentals/tests/test-helper\", [\"super-rentals/app\", \"super-rentals/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define('super-rentals/config/environment', [], function() {\n  var prefix = 'super-rentals';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('super-rentals/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}